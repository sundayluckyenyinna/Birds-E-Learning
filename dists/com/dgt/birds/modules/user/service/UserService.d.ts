import IUserService from "./IUserService";
import CreateUserRequestDTO from "../dto/request/CreateUserRequestDTO";
import ResponseDTO from "../../../config/ResponseDTO";
import { AuthTokenObject } from "../interfaces/UserModuleInterfaces";
import UserAuth from "../model/UserAuth";
import LoginUserRequestDTO, { AutomaticLoginRequestDTO } from "../dto/request/LoginUserRequestDTO";
import ValidateOtpRequestDTO from "../dto/request/ValidateOtpRequestDTO";
import UserBasicService from "./UserBasicService";
import OauthConsentUserRequestDTO from "../dto/request/OauthConsentUserRequestDTO";
import UserOauthService from "./UserOauthService";
import Oauth2ValidateUserRequestDTO from "../dto/request/Oauth2ValidateUserRequestDTO";
import UpdatePasswordRequestDTO from "../dto/request/UpdatePasswordRequestDTO";
import User from "../model/User";
import UserBasicServiceUtils, { UserDetailsQueryParams } from "./UserBasicServiceUtils";
import UpdateUserDetailsRequestDTO from "../dto/request/UpdateUserDetailsRequestDTO";
import UpdateUserPasswordRequestDTO from "../dto/request/UpdateUserPasswordRequestDTO";
export default class UserService implements IUserService {
    private readonly userBasicService;
    private readonly userOauthService;
    private readonly userBasicServiceUtils;
    constructor(userBasicService: UserBasicService, userOauthService: UserOauthService, userBasicServiceUtils: UserBasicServiceUtils);
    createUserBasic(requestUrl: string, requestDTO: CreateUserRequestDTO): Promise<ResponseDTO>;
    getOauth2UserConsentUrl(requestUrl: string, requestDTO: OauthConsentUserRequestDTO): Promise<ResponseDTO>;
    validateOauth2User(requestUrl: string, requestDTO: Oauth2ValidateUserRequestDTO): Promise<ResponseDTO>;
    loginUserBasic(requestUrl: string, requestDTO: LoginUserRequestDTO): Promise<ResponseDTO>;
    loginUserAutomatic(requestUrl: string, requestDTO: AutomaticLoginRequestDTO): Promise<ResponseDTO>;
    validateOtp(requestUrl: string, requestDTO: ValidateOtpRequestDTO): Promise<ResponseDTO>;
    sendVerificationOtp(requestUrl: string, emailAddress: string): Promise<ResponseDTO>;
    sendResetPasswordMail(requestUrl: string, emailAddress: string): Promise<ResponseDTO>;
    sendResetPasswordPage(requestUrl: string, encodedEmail: string): Promise<string>;
    sendPasswordResetMailForMobile(requestUrl: string, email: string): Promise<ResponseDTO>;
    validateForgetPasswordOTPForMobile(requestUrl: string, requestDTO: ValidateOtpRequestDTO): Promise<ResponseDTO>;
    updateUserPasswordForMobile(requestUrl: string, requestDTO: UpdatePasswordRequestDTO): Promise<ResponseDTO>;
    getAllUserDetails(requestUrl: string, query: UserDetailsQueryParams): Promise<ResponseDTO>;
    getSingleUserByEmail(requestUrl: string, email: string): Promise<ResponseDTO>;
    updateUserDetails(requestUrl: string, token: string, requestDTO: UpdateUserDetailsRequestDTO): Promise<ResponseDTO>;
    updateUserPassword(requestUrl: string, token: string, requestDTO: UpdateUserPasswordRequestDTO): Promise<ResponseDTO>;
    logoutUser(requestUrl: string, token: string): Promise<ResponseDTO>;
    static generateNewUserAuth: (tokenObject: AuthTokenObject, userId: string, requestDTO: LoginUserRequestDTO, user: User) => UserAuth;
    static isUserRoleValid: (roles: Array<String>) => boolean;
    static getLogMessage: (...messages: Array<string>) => string;
}
